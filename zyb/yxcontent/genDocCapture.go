package yxcontent

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"

	"github.com/spf13/cast"
)

func GenDocCapture() {

	contentIds := []int{1678368, 1678367, 1678366, 1678365, 1676803, 1676802, 1676801, 1676799, 1676798, 1676797, 1676796, 1676795, 1676794, 1676793, 1676791, 1676790, 1676789, 1676788, 1676787, 1676786, 1676785, 1676784, 1676783, 1676782, 1676781, 1676780, 1676779, 1676778, 1676777, 1676776, 1676775, 1676774, 1676773, 1676772, 1676771, 1676770, 1676769, 1676768, 1676767, 1676766, 1676765, 1676764, 1676763, 1676762, 1676761, 1676760, 1676759, 1676758, 1676757, 1676756, 1676755, 1676754, 1676753, 1676752, 1676751, 1676750, 1676749, 1676748, 1676747, 1676746, 1676745, 1676744, 1676743, 1676742, 1676741, 1676739, 1676738, 1676737, 1676736, 1676735, 1676734, 1676733, 1676732, 1676731, 1676730, 1676729, 1676728, 1676727, 1676726, 1676725, 1676724, 1676723, 1676722, 1676721, 1676720, 1676719, 1676718, 1676717, 1676716, 1676715, 1676714, 1676713, 1676712, 1676711, 1676710, 1676709, 1676708, 1676707, 1676706, 1676705, 1676704, 1676703, 1676702, 1676701, 1676700, 1676699, 1676698, 1676697, 1676696, 1676695, 1676694, 1676693, 1676692, 1676691, 1676690, 1676689, 1676688, 1676687, 1676686, 1676685, 1676684, 1676683, 1676682, 1676681, 1676680, 1676679, 1676678, 1676677, 1676676, 1676675, 1676674, 1676672, 1676671, 1676670, 1676669, 1676668, 1676667, 1676666, 1676665, 1676664, 1676663, 1676662, 1676661, 1676660, 1676659, 1676658, 1676656, 1676655, 1676654, 1676652, 1676651, 1676650, 1676649, 1676648, 1676647, 1676646, 1676645, 1676644, 1676643, 1676642, 1676641, 1676640, 1676639, 1676638, 1676637, 1676636, 1676635, 1676634, 1676633, 1676632, 1676631, 1676630, 1676629, 1676628, 1676627, 1676626, 1676625, 1676624, 1676623, 1676622, 1676621, 1676620, 1676619, 1676618, 1676617, 1676616, 1676615, 1676614, 1676613, 1676612, 1676611, 1676610, 1676608, 1676607, 1676606, 1676605, 1676604, 1676603, 1676602, 1676601, 1676600, 1676599, 1676598, 1676597, 1676596, 1676595, 1676594, 1676593, 1676592, 1676591, 1676590, 1676589, 1676588, 1676587, 1676586, 1676585, 1676584, 1676583, 1676582, 1676581, 1676580, 1676579, 1676578, 1676577, 1676576, 1676575, 1676574, 1676573, 1676572, 1676571, 1676570, 1676569, 1676568, 1676567, 1676566, 1676565, 1676564, 1676563, 1676562, 1676561, 1676560, 1676559, 1676558, 1676557, 1676556, 1676555, 1676554, 1676553, 1676552, 1676551, 1676550, 1676549, 1676548, 1676547, 1676546, 1676545, 1676544, 1676543, 1676542, 1676541, 1676540, 1676539, 1676538, 1676537, 1676536, 1676535, 1676534, 1676533, 1676532, 1676531, 1676530, 1676529, 1676528, 1676527, 1676526, 1676525, 1676524, 1676523, 1676522, 1676521, 1676520, 1676519, 1676518, 1676517, 1676516, 1676515, 1676514, 1676513, 1676512, 1676511, 1676510, 1676509, 1676508, 1676507, 1676506, 1676505, 1676504, 1676503, 1676502, 1676501, 1676500, 1676499, 1676498, 1676497, 1676496, 1676495, 1676494, 1676493, 1676492, 1676491, 1676490, 1676489, 1676488, 1676487, 1676486, 1676485, 1676484, 1676483, 1676482, 1676481, 1676480, 1676479, 1676478, 1676477, 1676476, 1676475, 1676474, 1676473, 1676472, 1676471, 1676470, 1676469, 1676468, 1676467, 1676466, 1676465, 1676464, 1676463, 1676462, 1676461, 1676460, 1676459, 1676458, 1676457, 1676456, 1676455, 1676454, 1676453, 1676452, 1676451, 1676450, 1676449, 1676448, 1676447, 1676446, 1676445, 1676444, 1676443, 1676442, 1676441, 1676440, 1676439, 1676438, 1676437, 1676436, 1676435, 1676434, 1676433, 1676432, 1676431, 1676430, 1676429, 1676428, 1676427, 1676426, 1676425, 1676424, 1676423, 1676422, 1676421, 1676420, 1676419, 1676418, 1676417, 1676416, 1676415, 1676414, 1676413, 1676412, 1676411, 1676410, 1676409, 1676408, 1676407, 1676406, 1676405, 1676404, 1676403, 1676402, 1676401, 1676400, 1676399, 1676398, 1676397, 1676396, 1676395, 1676394, 1676393, 1676392, 1676391, 1676390, 1676389, 1676388, 1676387, 1676385, 1676384, 1676383, 1676382, 1676381, 1676380, 1676379, 1676378, 1676377, 1676376, 1676375, 1676374, 1676373, 1676372, 1676371, 1676370, 1676369, 1676368, 1676367, 1676366, 1676365, 1676364, 1676363, 1676362, 1676361, 1676360, 1676359, 1676358, 1676357, 1676356, 1676355, 1676354, 1676353, 1676352, 1676351, 1676350, 1676349, 1676348, 1676347, 1676346, 1676345, 1676344, 1676343, 1676342, 1676341, 1676340, 1676339, 1676338, 1676337, 1676336, 1676335, 1676334, 1676333, 1676332, 1676331, 1676330, 1676329, 1676328, 1676327, 1676326, 1676325, 1676324, 1676323, 1676322, 1676321, 1676320, 1676319, 1676318, 1676317, 1676316, 1676315, 1676314, 1676313, 1676312, 1676311, 1676310, 1676309, 1676308, 1676307, 1676306, 1676305, 1676304, 1676303, 1676302, 1676301, 1676300, 1676299, 1676298, 1676297, 1676296, 1676295, 1676294, 1676293, 1676292, 1676291, 1676290, 1676289, 1676288, 1676287, 1676286, 1676285, 1676284, 1676283, 1676282, 1676281, 1676280, 1676279, 1676278, 1676277, 1676276, 1676275, 1676274, 1676273, 1676272, 1676271, 1676270, 1676269, 1676268, 1676267, 1676266, 1676265, 1676264, 1676263, 1676262, 1676261, 1676260, 1676259, 1676258, 1676257, 1676256, 1676255, 1676254, 1676253, 1676252, 1676251, 1676250, 1676249, 1676248, 1676247, 1676246, 1676245, 1676244, 1676243, 1676242, 1676241, 1676240, 1676239, 1676238, 1676237, 1676236, 1676235, 1676234, 1676233, 1676232, 1676231, 1676230, 1676229, 1676228, 1676227, 1676226, 1676225, 1676224, 1676223, 1676222, 1676221, 1676220, 1676219, 1676218, 1676217, 1676216, 1676215, 1676214, 1676213, 1676212, 1676211, 1676210, 1676209, 1676208, 1676207, 1676206, 1676205, 1676204, 1676203, 1676202, 1676201, 1676200, 1676199, 1676198, 1676197, 1676196, 1676195, 1676194, 1676193, 1676192, 1676191, 1676190, 1676189, 1676185, 1676179, 1676178, 1676177, 1676174, 1676171, 1676170, 1676169, 1676161, 1676140, 1676123, 1676116, 1676115, 1676114, 1676113, 1676073, 1676030, 1676029, 1676018, 1676017, 1676016, 1676001, 1675949, 1675938, 1675937, 1675869, 1675868, 1675862, 1675861, 1675860, 1675859, 1675858, 1675857, 1675856, 1675855, 1675849, 1675848, 1675847, 1675846, 1675844, 1675843, 1675840, 1675350, 1675344, 1675342, 1675333, 1675327, 1675311, 1675309, 1675307, 1675303, 1675302, 1675290, 1675264, 1675256, 1675242, 1675234, 1675232, 1675209, 1675203, 1675200, 1675183, 1675182, 1675177, 1675149, 1675132, 1675113, 1675110, 1675095, 1675083, 1675069, 1675048, 1675047, 1675035, 1675016, 1675013, 1675001, 1674999, 1674997, 1674982, 1674969, 1674967, 1674941, 1674938, 1674932, 1674929, 1674924, 1674916, 1674914, 1674904, 1674900, 1674895, 1674894, 1674891, 1674873, 1674869, 1674865, 1674861, 1674844, 1674843, 1674842, 1674838, 1674837, 1674835, 1674832, 1674830, 1674829, 1674828, 1674825, 1674817, 1674815, 1674813, 1674811, 1674809, 1674808, 1674804, 1674803, 1674802, 1674798, 1674797, 1674792, 1674785, 1674782, 1674780, 1674773, 1674764, 1674762, 1674756, 1674754, 1674743, 1674730, 1674729, 1674725, 1674714, 1674699, 1674687, 1674674, 1674673, 1674670, 1674669, 1674651, 1674643, 1674640, 1674639, 1674638, 1674637, 1674636, 1674634, 1674578, 1674575, 1674574, 1674569, 1674565, 1674559, 1674554, 1674552, 1674551, 1674546, 1674544, 1674540, 1674538, 1674528, 1674514, 1674512, 1674507, 1674499, 1674496, 1674495, 1674491, 1674489, 1674486, 1674478, 1674445, 1674443, 1674440, 1674429, 1674426, 1674418, 1674417, 1674416, 1674415, 1674410, 1674407, 1674406, 1673766}
	for _, contentId := range contentIds {
		requestDocCaptureApi(contentId)
		time.Sleep(1 * time.Second)
	}
}

func requestDocCaptureApi(contentId int) {

	urlStr := "https://wxtools.zuoyebang.cc/yxcontent/tools/index"

	// 创建一个请求变量
	req, err := http.NewRequest("GET", urlStr, nil)
	if err != nil {
		fmt.Printf("创建请求失败: %v\n", err)
		return
	}

	// 添加查询参数
	queryParams := url.Values{}
	queryParams.Add("method", "genContentCapture")
	queryParams.Add("contentIds", cast.ToString(contentId))
	queryParams.Add("isSync", "0")
	req.URL.RawQuery = queryParams.Encode()

	// 设置请求头
	req.Header.Set("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7")
	req.Header.Set("accept-language", "zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7")
	req.Header.Set("cache-control", "no-cache")
	req.Header.Set("cookie", "RANGERS_WEB_ID=6430599a-1243-4e7d-9d30-4de92cf0df82; RANGERS_SAMPLE=0.07367398890598964; uid=zhangxueren; ZYBIPSCAS=IPS_e59bd8e29381b08cc12ea633392133451720145103; Hm_lvt_c33960c712441eec1b994580263ccb1a=1715756176; Hm_lpvt_c33960c712441eec1b994580263ccb1a=1716189999; ZYBUSS=PwzWvo3l9NUKJIBEqGfFWPG56knpG0J71FHfn_eZZ5eDC8qqgojR-vJLf_QVeWqq;")
	req.Header.Set("pragma", "no-cache")
	req.Header.Set("priority", "u=0, i")
	req.Header.Set("sec-ch-ua", "\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"")
	req.Header.Set("sec-ch-ua-mobile", "?0")
	req.Header.Set("sec-ch-ua-platform", "\"macOS\"")
	req.Header.Set("sec-fetch-dest", "document")
	req.Header.Set("sec-fetch-mode", "navigate")
	req.Header.Set("sec-fetch-site", "none")
	req.Header.Set("sec-fetch-user", "?1")
	req.Header.Set("upgrade-insecure-requests", "1")
	req.Header.Set("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36")

	// 发送 HTTP 请求
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("发送请求失败:", err)
		return
	}

	// Read the response body
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	// 输出响应结果
	fmt.Println("request success, contentId:", contentId, " response body:", string(body))
}
